<?php

namespace Darkish\CategoryBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Darkish\CategoryBundle\Entity\MainTree;
use Darkish\CategoryBundle\Entity\Record;
use JMS\Serializer\SerializationContext;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * RecordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecordRepository extends EntityRepository implements ContainerAwareInterface
{
    /**
     * @var ContainerInterface
     */
    private $container;

    public function getRecordsForCat(MainTree $tree) {
        $mainTreeRepo = $this->getEntityManager()->getRepository('DarkishCategoryBundle:MainTree');

        $children = $mainTreeRepo->getTreeChildren($tree);

        $treesIds = array();
        $treesIds[] = $tree->getId();
        foreach($children as $child) {
            $treesIds[] = $child->getId();
        }

        $recordQuery = $this->createQueryBuilder('r');
        $recordQuery->join('r.maintrees', 'rt');
        $recordQuery->join('rt.tree','t', 'WITH',$recordQuery->expr()->in('t.id', $treesIds))->distinct();
        $recordQuery->orderBy('r.lastUpdate', 'Desc');
        // $recordQuery->addOrderBy('nt.sort', 'Asc');

        return $recordQuery;
    }


    public function generateStoreCache(Record $record, $serializer) {
        $storeInfo = $serializer
                        ->serialize($record, 'json', SerializationContext::create()
                                                        ->setGroups(["api.store", "file.details"])
                                        );
        $storeInfo = $serializer->deserialize($storeInfo, 'array', 'json');

        $groups = $record->getMarketGroups();


        $allProducts = [];
        foreach ($groups as $key => $group) {
            $products = $this->getEntityManager()->getRepository('DarkishCategoryBundle:Product')
                ->findBy(['group' => $group->getId()]);

            $allProducts[$group->getId()] = $products;
//            $products[$group->getId()] = ['test', 'test2'];
        }

        $serializedAllProducts = $serializer
            ->serialize($allProducts, 'json', SerializationContext::create()
                ->setGroups(["api.list","file.details", "api.store"]));
        $allProducts = $serializer->deserialize($serializedAllProducts, 'array', 'json');


        return [
            'store_info' => $storeInfo,
            'products' => $allProducts
        ];
    }


    /**
     * Sets the Container.
     *
     * @param ContainerInterface|null $container A ContainerInterface instance or null
     *
     * @api
     */
    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }
}
